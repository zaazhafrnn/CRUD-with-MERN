import React, { useState } from 'react';
import { useQuery, useMutation, gql } from '@apollo/client';
import TableComponent from '../component/TableComponent'; // Import the new TableComponent
import FormComponent from '../component/FormComponent'; // Import the new FormComponent
import ModalComponent from '../component/ModalComponent'; // Import the new ModalComponent

const GET_STUDENT = gql`
  query {
    students {
      id
      nama
      hobi
      umur
      kelas
    }
  }
`;

const CREATE_STUDENT = gql`
  mutation CreateStudent($nama: String!, $hobi: String!, $umur: Int!, $kelas: Int!) {
    create(nama: $nama, hobi: $hobi, umur: $umur, kelas: $kelas) {
      id
      nama
      hobi
      umur
      kelas
    }
  }
`;

const UPDATE_STUDENT = gql`
  mutation UpdateStudent($id: ID!, $nama: String, $hobi: String, $umur: Int, $kelas: Int) {
    update(id: $id, nama: $nama, hobi: $hobi, umur: $umur, kelas: $kelas) {
      id
      nama
      hobi
      umur
      kelas
    }
  }
`;

const DELETE_STUDENT = gql`
  mutation deleteStudent($id: ID!) {
    delete(id: $id) {
      id
      nama
      hobi
      umur
      kelas
    }
  }
`;

function Student() {
  const { loading, error, data } = useQuery(GET_STUDENT);
  const [createStudent] = useMutation(CREATE_STUDENT);
  const [updateStudent] = useMutation(UPDATE_STUDENT);
  const [deleteStudent] = useMutation(DELETE_STUDENT, {
    refetchQueries: [{ query: GET_STUDENT }],
  });

  const [addFormData, setAddFormData] = useState({
    id: null,
    nama: '',
    hobi: '',
    umur: 0,
    kelas: 0,
  });

  const [editFormData, setEditFormData] = useState({
    id: null,
    nama: '',
    hobi: '',
    umur: 0,
    kelas: 0,
  });

  const [editItemId, setEditItemId] = useState(null);

  const handleChangeAdd = (e) => {
    setAddFormData({
      ...addFormData,
      [e.target.name]: e.target.value,
    });
  };

  const handleChangeEdit = (e) => {
    setEditFormData({
      ...editFormData,
      [e.target.name]: e.target.value,
    });
  };

  const handleCreate = async () => {
    try {
      await createStudent({
        variables: {
          nama: addFormData.nama,
          hobi: addFormData.hobi,
          umur: parseInt(addFormData.umur),
          kelas: parseInt(addFormData.kelas),
        },
        refetchQueries: [{ query: GET_STUDENT }],
      });
      setAddFormData({
        id: null,
        nama: '',
        hobi: '',
        umur: 0,
        kelas: 0,
      });
    } catch (error) {
      console.error('Error creating student:', error.message);
    }
  };

  const [showEditModal, setShowEditModal] = useState(false);

  const handleEdit = (studentId) => {
    setEditItemId(studentId);
    setEditFormData({
      id: studentId,
      nama: data.students.find((p) => p.id === studentId).nama,
      hobi: data.students.find((p) => p.id === studentId).hobi,
      umur: data.students.find((p) => p.id === studentId).umur,
      kelas: data.students.find((p) => p.id === studentId).kelas,
    });

    setShowEditModal(true);
  };

  const handleCancelEdit = () => {
    setEditItemId(null);
    setEditFormData({
      id: null,
      nama: '',
      hobi: '',
      umur: 0,
      kelas: 0,
    });

    setShowEditModal(false);
  };

  const handleSaveEdit = async () => {
    try {
      await updateStudent({
        variables: {
          id: editFormData.id,
          nama: editFormData.nama,
          hobi: editFormData.hobi,
          umur: parseInt(editFormData.umur),
          kelas: parseInt(editFormData.kelas),
        },
        refetchQueries: [{ query: GET_STUDENT }],
      });
      setEditItemId(null);
      setEditFormData({
        id: null,
        nama: '',
        hobi: '',
        umur: 0,
        kelas: 0,
      });
      setShowEditModal(false);

    } catch (error) {
      console.error('Error updating student:', error.message);
    }
  };

  const [showConfirmation, setShowConfirmation] = useState(false);
  const [studentToDelete, setStudentToDelete] = useState(null);

  const handleDelete = (studentId) => {
    setShowConfirmation(true);
    setStudentToDelete(studentId)
  };

  const handleConfirmDelete = async () => {
    try {
      await deleteStudent({
        variables: {
          id: studentToDelete
        }
      });
      setShowConfirmation(false);
      setStudentToDelete(null);
    } catch (error) {
      console.error('Error deleting student', error.message);
    }
  };

  const handleCancelDelete = () => {
    setShowConfirmation(false);
    setStudentToDelete(null);
  }

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  const studentColumns = [
    { key: 'nama', label: 'Nama' },
    { key: 'hobi', label: 'Hobi' },
    { key: 'umur', label: 'Umur' },
    { key: 'kelas', label: 'Kelas' },
  ];
  
  

  return (
    <div className="p-12 overflow-x h-screen rounded-lg border border-gray-800 shadow-md bg-gray-900 text-white">
      <TableComponent
        data={data.students}
        columns={studentColumns}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />

      <FormComponent
        initialValues={addFormData}
        onSubmit={handleCreate}
        onCancel={() => setAddFormData({
          id: null,
          nama: '',
          hobi: '',
          umur: 0,
          kelas: 0,
        })}
      />

      {showConfirmation && (
        <ModalComponent
          title="Confirmation"
          content="Are you sure you want to delete this item?"
          onClose={handleCancelDelete}
        />
      )}

      {showEditModal && (
        <ModalComponent
          title="Edit Student"
          content={
            <FormComponent
              initialValues={editFormData}
              onSubmit={handleSaveEdit}
              onCancel={handleCancelEdit}
            />
          }
          onClose={handleCancelEdit}
        />
      )}
    </div>
  );
}

export default Student;
